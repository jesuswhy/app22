/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { Supply } from "./Supply";
import { SupplyCountArgs } from "./SupplyCountArgs";
import { SupplyFindManyArgs } from "./SupplyFindManyArgs";
import { SupplyFindUniqueArgs } from "./SupplyFindUniqueArgs";
import { CreateSupplyArgs } from "./CreateSupplyArgs";
import { UpdateSupplyArgs } from "./UpdateSupplyArgs";
import { DeleteSupplyArgs } from "./DeleteSupplyArgs";
import { Product } from "../../product/base/Product";
import { Customer } from "../../customer/base/Customer";
import { Supplier } from "../../supplier/base/Supplier";
import { Transporter } from "../../transporter/base/Transporter";
import { SupplyCreateInput } from "./SupplyCreateInput";
import { SupplyWhereInput } from "./SupplyWhereInput";
import { SupplyWhereUniqueInput } from "./SupplyWhereUniqueInput";
import { SupplyUpdateInput } from "./SupplyUpdateInput";
import { SupplyService } from "../supply.service";
@graphql.Resolver(() => Supply)
export class SupplyResolverBase {
  constructor(protected readonly service: SupplyService) {}

  async _suppliesMeta(
    @graphql.Args() args: SupplyCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [Supply])
  async supplies(@graphql.Args() args: SupplyFindManyArgs): Promise<Supply[]> {
    return this.service.supplies(args);
  }

  @graphql.Query(() => Supply, { nullable: true })
  async supply(
    @graphql.Args() args: SupplyFindUniqueArgs
  ): Promise<Supply | null> {
    const result = await this.service.supply(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => Supply)
  async createSupply(@graphql.Args() args: CreateSupplyArgs): Promise<Supply> {
    return await this.service.createSupply({
      ...args,
      data: {
        ...args.data,

        product: args.data.product
          ? {
              connect: args.data.product,
            }
          : undefined,

        customer: args.data.customer
          ? {
              connect: args.data.customer,
            }
          : undefined,

        supplier: args.data.supplier
          ? {
              connect: args.data.supplier,
            }
          : undefined,

        transporter: args.data.transporter
          ? {
              connect: args.data.transporter,
            }
          : undefined,
      },
    });
  }

  @graphql.Mutation(() => Supply)
  async updateSupply(
    @graphql.Args() args: UpdateSupplyArgs
  ): Promise<Supply | null> {
    try {
      return await this.service.updateSupply({
        ...args,
        data: {
          ...args.data,

          product: args.data.product
            ? {
                connect: args.data.product,
              }
            : undefined,

          customer: args.data.customer
            ? {
                connect: args.data.customer,
              }
            : undefined,

          supplier: args.data.supplier
            ? {
                connect: args.data.supplier,
              }
            : undefined,

          transporter: args.data.transporter
            ? {
                connect: args.data.transporter,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Supply)
  async deleteSupply(
    @graphql.Args() args: DeleteSupplyArgs
  ): Promise<Supply | null> {
    try {
      return await this.service.deleteSupply(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => Product, {
    nullable: true,
    name: "product",
  })
  async getProduct(@graphql.Parent() parent: Supply): Promise<Product | null> {
    const result = await this.service.getProduct(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @graphql.ResolveField(() => Customer, {
    nullable: true,
    name: "customer",
  })
  async getCustomer(
    @graphql.Parent() parent: Supply
  ): Promise<Customer | null> {
    const result = await this.service.getCustomer(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @graphql.ResolveField(() => Supplier, {
    nullable: true,
    name: "supplier",
  })
  async getSupplier(
    @graphql.Parent() parent: Supply
  ): Promise<Supplier | null> {
    const result = await this.service.getSupplier(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @graphql.ResolveField(() => Transporter, {
    nullable: true,
    name: "transporter",
  })
  async getTransporter(
    @graphql.Parent() parent: Supply
  ): Promise<Transporter | null> {
    const result = await this.service.getTransporter(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => Supply)
  async CreateSupply(
    @graphql.Args()
    args: SupplyCreateInput
  ): Promise<Supply> {
    return this.service.CreateSupply(args);
  }

  @graphql.Mutation(() => Supply)
  async DeleteSupply(
    @graphql.Args()
    args: DeleteSupplyArgs
  ): Promise<Supply> {
    return this.service.DeleteSupply(args);
  }

  @graphql.Query(() => [Supply])
  async GetAllSupplies(
    @graphql.Args()
    args: SupplyWhereInput[]
  ): Promise<Supply[]> {
    return this.service.GetAllSupplies(args);
  }

  @graphql.Query(() => Supply)
  async GetSupplyById(
    @graphql.Args()
    args: SupplyWhereUniqueInput
  ): Promise<Supply> {
    return this.service.GetSupplyById(args);
  }

  @graphql.Mutation(() => Supply)
  async UpdateSupply(
    @graphql.Args()
    args: SupplyUpdateInput
  ): Promise<Supply> {
    return this.service.UpdateSupply(args);
  }
}
