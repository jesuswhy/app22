/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { SupplyService } from "../supply.service";
import { SupplyCreateInput } from "./SupplyCreateInput";
import { Supply } from "./Supply";
import { SupplyFindManyArgs } from "./SupplyFindManyArgs";
import { SupplyWhereUniqueInput } from "./SupplyWhereUniqueInput";
import { SupplyUpdateInput } from "./SupplyUpdateInput";

export class SupplyControllerBase {
  constructor(protected readonly service: SupplyService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Supply })
  async createSupply(@common.Body() data: SupplyCreateInput): Promise<Supply> {
    return await this.service.createSupply({
      data: {
        ...data,

        product: data.product
          ? {
              connect: data.product,
            }
          : undefined,

        customer: data.customer
          ? {
              connect: data.customer,
            }
          : undefined,

        supplier: data.supplier
          ? {
              connect: data.supplier,
            }
          : undefined,

        transporter: data.transporter
          ? {
              connect: data.transporter,
            }
          : undefined,
      },
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        customerAdvance: true,
        advanceSum: true,
        documentSentDate: true,
        customerPaymentStatus: true,
        customerPaymentSum: true,
        gUstatus: true,
        estimatedCnyRate: true,
        exportContractNumber: true,
        supplyOwner: true,
        actuallyShippedVolume: true,
        plannedTrainDispatch: true,
        actualTrainDispatch: true,
        comments: true,
        finish: true,
        fss: true,
        st1: true,
        survey: true,
        paymentIssues: true,
        estimatedLogisticsRate: true,
        manager: true,
        deliveryNumber: true,
        secured: true,
        status: true,
        salesVolume: true,
        salesPrice: true,
        sum: true,
        basis: true,
        purchaseRegion: true,
        purchaseVolume: true,
        deficit: true,
        weightedAvgPurchasePrice: true,
        transportRate: true,
        dispatchStartDate: true,
        trainContractDispatch: true,
        shipDispatch: true,
        hedgeStatus: true,
        paidToSupplier: true,
        supplierPaymentStatus: true,
        invoiceDirectionDate: true,

        product: {
          select: {
            id: true,
          },
        },

        customer: {
          select: {
            id: true,
          },
        },

        supplier: {
          select: {
            id: true,
          },
        },

        transporter: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Supply] })
  @ApiNestedQuery(SupplyFindManyArgs)
  async supplies(@common.Req() request: Request): Promise<Supply[]> {
    const args = plainToClass(SupplyFindManyArgs, request.query);
    return this.service.supplies({
      ...args,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        customerAdvance: true,
        advanceSum: true,
        documentSentDate: true,
        customerPaymentStatus: true,
        customerPaymentSum: true,
        gUstatus: true,
        estimatedCnyRate: true,
        exportContractNumber: true,
        supplyOwner: true,
        actuallyShippedVolume: true,
        plannedTrainDispatch: true,
        actualTrainDispatch: true,
        comments: true,
        finish: true,
        fss: true,
        st1: true,
        survey: true,
        paymentIssues: true,
        estimatedLogisticsRate: true,
        manager: true,
        deliveryNumber: true,
        secured: true,
        status: true,
        salesVolume: true,
        salesPrice: true,
        sum: true,
        basis: true,
        purchaseRegion: true,
        purchaseVolume: true,
        deficit: true,
        weightedAvgPurchasePrice: true,
        transportRate: true,
        dispatchStartDate: true,
        trainContractDispatch: true,
        shipDispatch: true,
        hedgeStatus: true,
        paidToSupplier: true,
        supplierPaymentStatus: true,
        invoiceDirectionDate: true,

        product: {
          select: {
            id: true,
          },
        },

        customer: {
          select: {
            id: true,
          },
        },

        supplier: {
          select: {
            id: true,
          },
        },

        transporter: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Supply })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async supply(
    @common.Param() params: SupplyWhereUniqueInput
  ): Promise<Supply | null> {
    const result = await this.service.supply({
      where: params,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        customerAdvance: true,
        advanceSum: true,
        documentSentDate: true,
        customerPaymentStatus: true,
        customerPaymentSum: true,
        gUstatus: true,
        estimatedCnyRate: true,
        exportContractNumber: true,
        supplyOwner: true,
        actuallyShippedVolume: true,
        plannedTrainDispatch: true,
        actualTrainDispatch: true,
        comments: true,
        finish: true,
        fss: true,
        st1: true,
        survey: true,
        paymentIssues: true,
        estimatedLogisticsRate: true,
        manager: true,
        deliveryNumber: true,
        secured: true,
        status: true,
        salesVolume: true,
        salesPrice: true,
        sum: true,
        basis: true,
        purchaseRegion: true,
        purchaseVolume: true,
        deficit: true,
        weightedAvgPurchasePrice: true,
        transportRate: true,
        dispatchStartDate: true,
        trainContractDispatch: true,
        shipDispatch: true,
        hedgeStatus: true,
        paidToSupplier: true,
        supplierPaymentStatus: true,
        invoiceDirectionDate: true,

        product: {
          select: {
            id: true,
          },
        },

        customer: {
          select: {
            id: true,
          },
        },

        supplier: {
          select: {
            id: true,
          },
        },

        transporter: {
          select: {
            id: true,
          },
        },
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Supply })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateSupply(
    @common.Param() params: SupplyWhereUniqueInput,
    @common.Body() data: SupplyUpdateInput
  ): Promise<Supply | null> {
    try {
      return await this.service.updateSupply({
        where: params,
        data: {
          ...data,

          product: data.product
            ? {
                connect: data.product,
              }
            : undefined,

          customer: data.customer
            ? {
                connect: data.customer,
              }
            : undefined,

          supplier: data.supplier
            ? {
                connect: data.supplier,
              }
            : undefined,

          transporter: data.transporter
            ? {
                connect: data.transporter,
              }
            : undefined,
        },
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          customerAdvance: true,
          advanceSum: true,
          documentSentDate: true,
          customerPaymentStatus: true,
          customerPaymentSum: true,
          gUstatus: true,
          estimatedCnyRate: true,
          exportContractNumber: true,
          supplyOwner: true,
          actuallyShippedVolume: true,
          plannedTrainDispatch: true,
          actualTrainDispatch: true,
          comments: true,
          finish: true,
          fss: true,
          st1: true,
          survey: true,
          paymentIssues: true,
          estimatedLogisticsRate: true,
          manager: true,
          deliveryNumber: true,
          secured: true,
          status: true,
          salesVolume: true,
          salesPrice: true,
          sum: true,
          basis: true,
          purchaseRegion: true,
          purchaseVolume: true,
          deficit: true,
          weightedAvgPurchasePrice: true,
          transportRate: true,
          dispatchStartDate: true,
          trainContractDispatch: true,
          shipDispatch: true,
          hedgeStatus: true,
          paidToSupplier: true,
          supplierPaymentStatus: true,
          invoiceDirectionDate: true,

          product: {
            select: {
              id: true,
            },
          },

          customer: {
            select: {
              id: true,
            },
          },

          supplier: {
            select: {
              id: true,
            },
          },

          transporter: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Supply })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteSupply(
    @common.Param() params: SupplyWhereUniqueInput
  ): Promise<Supply | null> {
    try {
      return await this.service.deleteSupply({
        where: params,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          customerAdvance: true,
          advanceSum: true,
          documentSentDate: true,
          customerPaymentStatus: true,
          customerPaymentSum: true,
          gUstatus: true,
          estimatedCnyRate: true,
          exportContractNumber: true,
          supplyOwner: true,
          actuallyShippedVolume: true,
          plannedTrainDispatch: true,
          actualTrainDispatch: true,
          comments: true,
          finish: true,
          fss: true,
          st1: true,
          survey: true,
          paymentIssues: true,
          estimatedLogisticsRate: true,
          manager: true,
          deliveryNumber: true,
          secured: true,
          status: true,
          salesVolume: true,
          salesPrice: true,
          sum: true,
          basis: true,
          purchaseRegion: true,
          purchaseVolume: true,
          deficit: true,
          weightedAvgPurchasePrice: true,
          transportRate: true,
          dispatchStartDate: true,
          trainContractDispatch: true,
          shipDispatch: true,
          hedgeStatus: true,
          paidToSupplier: true,
          supplierPaymentStatus: true,
          invoiceDirectionDate: true,

          product: {
            select: {
              id: true,
            },
          },

          customer: {
            select: {
              id: true,
            },
          },

          supplier: {
            select: {
              id: true,
            },
          },

          transporter: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Post("/supplies")
  @swagger.ApiOkResponse({
    type: Supply,
  })
  @swagger.ApiNotFoundResponse({
    type: errors.NotFoundException,
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async CreateSupply(
    @common.Body()
    body: SupplyUpdateInput
  ): Promise<Supply> {
    return this.service.CreateSupply(body);
  }

  @common.Delete("/supplies/:id")
  @swagger.ApiOkResponse({
    type: Supply,
  })
  @swagger.ApiNotFoundResponse({
    type: errors.NotFoundException,
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async DeleteSupply(
    @common.Body()
    body: SupplyUpdateInput
  ): Promise<Supply> {
    return this.service.DeleteSupply(body);
  }

  @common.Get("/supplies")
  @swagger.ApiOkResponse({
    type: Supply,
  })
  @swagger.ApiNotFoundResponse({
    type: errors.NotFoundException,
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async GetAllSupplies(
    @common.Body()
    body: SupplyUpdateInput
  ): Promise<Supply[]> {
    return this.service.GetAllSupplies(body);
  }

  @common.Get("/supplies/:id")
  @swagger.ApiOkResponse({
    type: Supply,
  })
  @swagger.ApiNotFoundResponse({
    type: errors.NotFoundException,
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async GetSupplyById(
    @common.Body()
    body: SupplyUpdateInput
  ): Promise<Supply> {
    return this.service.GetSupplyById(body);
  }

  @common.Put("/supplies/:id")
  @swagger.ApiOkResponse({
    type: Supply,
  })
  @swagger.ApiNotFoundResponse({
    type: errors.NotFoundException,
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async UpdateSupply(
    @common.Body()
    body: SupplyUpdateInput
  ): Promise<Supply> {
    return this.service.UpdateSupply(body);
  }
}
